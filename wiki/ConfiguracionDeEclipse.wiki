Esta sección &nbsp;explica como configurar &nbsp;Eclipse IDE de forma tal que &nbsp;sigamos los mismos estandares de desarrollo y políticas en general. Las siguientes secciones describen cada uno de los pasos a tener en cuenta para setupear el entorno 

= Entorno de Desarrollo  =

Configuración inicial de Eclipse 

== Instalación  ==

En el file server ('''\\hxfs02.hexacta.com\Instaladores\Eclipse''') están las diferentes versiones de eclipse 32b y 64b para windows y linux (quizas alguna falte, por favor avisar así la bajamos). Estás versiones son las estandard de Eclipse y requiere que sigan el instructivo de la sección [[HAT:IDE Eclipse-Hexacta#Configuracion_estandard_de_Eclipse|Configuracion estandard de Eclipse]] para configurarlo correctamente. 

Otra alternativa es utilizar la instalación ya configurada de eclipse que incluye una serie de plugins y settings aprovechar algunas de las funcionalidades que provee el ambiente, para esto debe seguir el siguiente [[HAT:IDE Eclipse-Hexacta#Eclipse_Pre-Configurado|instructivo]] 

<br> 

----

=== Eclipse Pre-Configurado  ===

Ubicación&nbsp;: '''\\hxfs02.hexacta.com\Instaladores\Eclipse\Helios\Eclipse-Hexacta-Estandard''' 

En este directorio se encuentran dos versiones de Eclipse Helios, una para 64 bits, y otra para 32 ('''IMPORTANTE:''' esto es según la JVM que estemos utilizando en nuestra PC, si no no funcionará). 

'''ACLARACIONES IMPORTANTES''': Es necesario al descomprimir el archivo, realizar un par de configuraciones antes de poder usar felizmente el eclipse. 

#Instalar la JVM de 64 bits o de 32 bits (http://www.java.com/en/download/manual.jsp?locale=en). 
#Crear&nbsp;&nbsp;la variable de classpath '''M2_REPO '''apuntando al directorio donde se encuentra el repo de Maven. (en general es &lt;user&gt;/.m2/repository). Para ello, ir a Window-&gt;Properties. Java-&gt;build-&gt;Classpath variables y agregarla ahí. Para esto es necesario tener Maven instalado y definir la variable JAVA_HOME.&nbsp; 
#Cconfigurar CheckStyle en la PC. Hay dos maneras de hacer esto:

&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; A. Copiar el archivo '''checkstyle_HEXACTA.xml'''&nbsp;y ubicarlo en un directorio con los demás archivos de configuración de Eclipse. (ver el apartado de [[HAT:IDE Eclipse-Hexacta#Checkstyle_Eclipse_Plugin|checkstyle]] para encontrar los distintos archivos de configuración). 

&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; B. Configurar todo Checkstyle (Ver apartado checkstyle) con ese mismo archivo. 

<br> 

Se recomienda la primer opción ya que la segunda, en algunos casos, puede tener problemas ya que desconfigura algunos settings y será necesario &nbsp;configurar nuevamente &nbsp;todos los plugins de la sección [[HAT:IDE Eclipse-Hexacta#Configuracion_estandard_de_Eclipse|Configuracion estandard de Eclipse]] 

----

<br> <br> 

== Modificación de los valores de memoria de Eclipse  ==

Modificar el archivo de configuración eclipse.ini para que su contenido quede similar a: 

'''&nbsp;&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; -showsplash org.eclipse.platform -vmargs -Xms40m -Xmx1024m -XX:MaxPermSize=256m''' 

Es importante notar que esta configuracion es a modo de ejemplo, pero es clave setear valores acordes a la plataforma para que eclipse pueda correr de manera fluida. 

=== Breve explicación de los parametros  ===

En Java, hay varios parámetros para controlar el tamaño inicial y el tamaño máximo que puede tomar la máquina virtual.Además, hay que tener en cuenta el tipo de memoria sobre el que se quiere actuar: heap, non-heap (PermGen). Los valores por defecto que se dan corresponden a máquina virtuales de Sun, y son orientativos, porque pueden cambiar entre versiones de la máquina virtual. Los parámetros son los siguientes,donde &lt;VALOR&gt; deberis sustituirse por la cantidad de memeoria a asignar ej:128,256,512,768,1024 ...&nbsp;: 

*'''-Xms&lt;VALOR&gt;m''': Tamaño de inicio de la máquina virtual de Java. El valor por defecto son 64Mb. Si se aumenta este valor, se elimina el tiempo que se tardaría en aumentar el tamaño en memoria de la máquina virtual si se llegara el caso de que se necesitara más memoria, por lo que aumentaría el rendimiento en los casos que la aplicación haga uso intensivo de la memoria. 
*'''-Xmx&lt;VALOR&gt;m:''' Tamaño máximo de la máquina virtual de Java. El valor por defecto son 128Mb. Si la aplicación supera el tamaño máximo de memoria que marca este parámetro, se lanza la excepción java.lang.OutOfMemoryError. No conviene asignar a este parámetro el máximo de la memoria de la máquina porque si ya no queda memoria física disponible (por la que usa el sistema operativo u otras aplicaciones) se pueden producir escrituras en memoria asignada a otros programas y provocar un caos total. 
*'''-XX:PermSize=&lt;VALOR&gt;m''': Tamaño de inicio de la memoria de tipo PermGen. Arrancar la máquina virtual con un valor superior al por defecto agiliza la carga de aplicaciones, sobre todo en el caso de aplicaciones que hagan uso intensivo de este tipo de memoria (Spring, Hibernate…) 
*'''-XX:MaxPermSize=&lt;VALOR&gt;m''': Tamaño máximo de la memoria de tipo PermGen. El valor por defecto son 64Mb. Si la aplicación supera el tamaño máximo de memoria para este tipo que marca este parámetro, se lanza la excepción java.lang.OutOfMemoryError: PermGen space. El valor necesario para este parámetro siempre suele ser menor que el de la memoria de tipo heap.

=== Diferentes tipos de memoria  ===

*'''Memoria PermGem'''

Es la memoria usada por la máquina virtual para almacenar el código estático de las aplicaciónes que corren en ella. Frameworks como Hibernate y Spring utilizan este tipo de memoria para cargar clases on-the-fly. 

Ejemplo: Las librerías usadas por un contenedor web pueden ocupar entre 20 y 30 MB. De todas formas seguimos teniendo un margen bastante amplio (unos 30 MB), pero a los 20-30 MB anteriores tenemos que sumarle el tamaño de las librerías de las que depende nuestra aplicación (normalmente en WEB-INF/lib), que si nos descuidamos levemente pueden alcanzar los 20 MB. Llegados a este punto casi hemos alcanzado los 64 MB. 

*'''M''''''emoria HEAP'''

Es la memoria utilizada para alocar objetos nuevos. Esta memoria suele llenarse rápidamente ya sea por un memory leak o &nbsp;simplemente pq la aplicación necesita mas de lo configurado . Sobre esta memoria trabaja el Garbage collector. 

=== Links relacionados  ===

*http://publib.boulder.ibm.com/infocenter/wasinfo/v6r1/index.jsp?topic=/org.eclipse.platform.doc.user/tasks/running_eclipse.htm 
*http://java.sun.com/javase/technologies/hotspot/vmoptions.jsp

= Configuracion estandard de Eclipse  =

Las siguientes configuraciones de Eclipse permiten un desarrollo mas simple y aprovechar mejor las caracteristicas de formatting y ayudas contextuales de Eclipse, de forma que el codigo cumpla con los estandares de la organizacion. 

La idea es introducir los mismos chequeos de compilacion y formato de codigo fuente en la maquinaria de build (maven preferentemente), de forma que los mismos sean detectados al construir cada producto. Por lo tanto, para minimizar este tipo de errores es altamente aconsejable configurar Eclipse como se explica a continuacion. 

== Configuracion de niveles de warnings del compilador y otras preferencias para desarrollo  ==

Este paso no es obligatorio pero es altamente recomendable hacerlo ya que ayuda a detectar algunos bugs o recomendaciones/estandares. 

El archivo a importar contiene: 

*las preferencias referentes a notificaciones de Warning y Error del compilador (seccion Java | Compiler | Error/Warnings en la ventana de Preferences) 
*las acciones a ejecutarse cada vez que se realiza la accion de guardar sobre un archivo de codigo fuente (seccion Java | Editor | Save Actions en la ventana de Preferences) 
*Code templates para los archivos nuevos

Estas preferencias son globales y deben ser importadas en la instalacion de Eclipse (es decir, no estan en el workspace). Es recomendable hacer un backup del directorio configuracion de Eclipse antes de proseguir (en caso de querer deshacer los cambios). 

Para importarlo ir a File | Import . En el Wizard Dialog seleccione General | Preferences y presione Next. Asegurese de tener seleccionado 'Import all' y seleccione el archivo 

'''''eclipse_prefs_HEXACTA.epf''''' (puede obtener una copia en el [http://hxtfs02/sites/HAT/CI/Forms/AllItems.aspx?RootFolder=%2fsites%2fHAT%2fCI%2fConfig%20Eclipse%20Files&FolderCTID=&View={FC4FEAC9-8938-4EEF-8B43-6D74BF5E71B4} sharepoint]) 

Para comprobar que fue exitoso, ir a Window | Preferences y seleccione el item 'Java | Editor | Save Actions'. Si la importacion funcionó bien la opcion de ejecutar ciertas acciones al guardar debe estar seleccionada. 

[[Image:SaveActions.png|center]] 

<br> 

Nota: si se hace re-import del "eps" luego tambien se debera re-importar el archivo de code templates! Si no, se perderan los templates anteriores 

<br> 

== Checkstyle Eclipse Plugin  ==

Este plugin permite tener chequeo estático de naming convention estandard . El plugin marca como warning en la vista de Tasks del Eclipse cualquier violacion al estilo definido. Si se importa el profile de formatter que se explica en la seccion de 'Configuracion de Eclipse' y se aplica dicho formatter cada vez que se guardan cambios o antes de commitear entonces no hace falta utilizar este plugin. 

Si se quiere estar seguro de no estar subiendo codigo al repositorio que podria violar algun estilo, se lo puede utilizar localmente y tener en la lista de warnings cualquier desviacion del standard. 

Para instalarlo hay que agregar la siguiente URL al update manager: 

[http://eclipse-cs.sourceforge.net/update http://eclipse-cs.sourceforge.net/update] 

Luego es necesario cargar el profile HEXACTA (que coincide con el Eclipse formatter que se explica mas adelante). Para esto, ir a Window | Preferences | Checkstyle y en la seccion 'Global Check Configurations' presione New. 

En la ventana que se abrira seleccione como Type el valor 'External Configuration File'. En el campo Name ingrese '''HEXACTA '''(CUIDADO! el nombre que ingrese aqui ES IMPORTANTE, es un id para otras configuraciones). En el campo Location localize en su disco el archivo: 

'''checkstyle_HEXACTA.xml '''(la última versión de estos archivos se encuentran en el [https://svn.hexacta.com/svn/hat001/Eclipse-conf-estandard/ SVN], preguntar por permisos a hat@hexacta.com). 

<br> El plugin se puede activar para uno o varios proyectos desde el menu contextual, teniendo un proyecto Java seleccionado. 

Ver configuracíon de Checkstyle con Maven y ANT ... [[HAT:Checkstyle|Checkstyle]] 

<br> 

[[Image:Checkstyle.png|center]] 

<br> 

<br> 

== Activar assert keyword para todos los proyectos de Eclipse  ==

Ir a Windows -&gt; Preferences -&gt; Java -&gt; Installed JREs. Lueso seleccionar la JDK y seleccionar Edit. En donde dice “Default VM Arguments” poner:&nbsp; -ea. 

<br> 

[[Image:AssertKeyword.jpg|border|center]] 

*http://java.sun.com/developer/technicalArticles/JavaLP/assertions/ 
*http://tech.puredanger.com/2007/01/17/eclipse-assertions/

== Importar configuraciones de Code Style  ==

  '''IMPORTANTE''': La última version de los archivos de configuración se encuentran en https://svn.hexacta.com/svn/hat001/Eclipse-conf-estandard/ ,
 si no tienen permisos para bajarlos, por favor enviar un mail a hat@hexacta.com

<br> 

=== <u>Code Style - Formatter</u>  ===

Ir al Menu de Eclipse, en Window | Preferences y seleccionar el elemento Java | Code Style | Formatter del arbol de propiedades. Luego presione el boton Import y seleccione el archivo de profile: 

'''''eclipse_formatter_profile_HEXACTA.xml&nbsp;'''''(la última versión de estos archivos se encuentran en el [https://svn.hexacta.com/svn/hat001/Eclipse-conf-estandard/ SVN], preguntar por permisos a hat@hexacta.com). 

Verificar que &nbsp;el profile llamado ''''HEXACTA'''' sea el seleccionado en el combo box 'Active profile' 

<br> 

[[Image:Formatter.png|center]] 

<br> 

=== <u>Code Style - Clean Up</u>  ===

Ir al Menude Eclipse, en Window | Preferences y seleccione el elemento Java | Code Style | Clean Up del arbol de propiedades. Luego presionar el boton Import y seleccione el archivo de profile: 

'''''eclipse_code_clean_up_id-HEXACTA.xml'''''&nbsp;&nbsp;(la última versión de estos archivos se encuentran en el [https://svn.hexacta.com/svn/hat001/Eclipse-conf-estandard/ SVN], preguntar por permisos a hat@hexacta.com). 

Verifique el profile llamado ''''HEXACTA'''' sea el seleccionado en el combo box 'Active profile' 

<br> 

<br> 

[[Image:CleanUp.png|center]] 

<br> 

=== <u>Code Style - Code Templates</u>  ===

Ir al Menu de Eclipse, en Window | Preferences y seleccione el elemento Java | Code Style | Code Templates del arbol de propiedades. Luego presione el boton Import y seleccione el archivo de profile: 

'''''eclipse_codetemplates_HEXACTA.xml''''' (la última versión de estos archivos se encuentran en el [https://svn.hexacta.com/svn/hat001/Eclipse-conf-estandard/ SVN], preguntar por permisos a hat@hexacta.com). 

Verificar que la carga fue exitosa revisando el contenido del elemento Code | Method body en el arbol de templates. Este debe tener la línea 

'''''throw new UnsupporteOperationException();''''' 

<br> 

[[Image:Codetemplates.png|center]] 

<br> 

= Plugins recomendados  =

== Mouse Feed  ==

[http://www.mousefeed.com/ http://www.mousefeed.com/] 

Este plugin es bastante simple, lo único que hace es mostrarnos (tipo pop-in) los shurcuts de las acciones que ejecutamos utilizando el mouse. 

Es muy recomendable para aprender los shortcut de apoco 

[http://update.mousefeed.com http://update.mousefeed.com] 

== Fast Code  ==

[http://fast-code.sourceforge.net/ http://fast-code.sourceforge.net/] 

Este plugin sirve para generar rapidamente porciones similares de código, que se repiten en varias aplicaciones EE. 

La instalación es bastante simple: Acceder a la página del plugin, descargar el JAR y ponerlo en la carpeta plugins dentro del directorio de eclipse. 

== EclEmma  ==

[http://www.eclemma.org/ http://www.eclemma.org/] 

EclEmma es un plugin que provee Code Coverage. 

Para instalarlo, abrir solapa Help-&gt;Install new software. Poner [http://update.eclemma.org/ http://update.eclemma.org/ ]&nbsp; en donde dice "Work with", clickear Add y aparecerá el plugin en la ventana central. Tildarlo y poner Next. 

<br> 

<br> 

== SVN Eclipse plugin  ==

A partir del 2009 subVersive fue aceptado como incubator en eclipse. http://www.eclipse.org/subversive/downloads.php 

'''Update site:''' Update Site is a part of Helios Update Site. Look at Help &gt; Install New Software... &gt; select Helios - http://download.eclipse.org/releases/helios &gt; Collaboration Tools 

<br> 

<br> 

[[Image:Subversive.png|center]] 

= Plugins opcionales&nbsp;  =

== Spring IDE  ==

Spring source lanzo su propio IDE llamado Spring suite tool pero todavía se puede instalar los plugins de manera individual en un eclipse. 

El repositorio [http://springide.org/updatesite/ http://springide.org/updatesite/] contiene varios plugins de spring para eclipse, es recomendable instalar solo lo que se necesita .. posiblemente con "Spring Core" y "Spring IDE integration Core" alcanza. 

<br> 

== PMD Eclipse Plugin  ==

Este plugin analiza código Java y busca potenciales problemas como (entre tantos otros): 

&nbsp;&nbsp; * Possible bugs - sentencias vacías try/catch/finally/switch<br>&nbsp;&nbsp; * Dead code - variables locales, parámetros y métodos privados no usados<br>&nbsp;&nbsp; * Suboptimal code - mal uso de String/StringBuffer<br>&nbsp;&nbsp; * Overcomplicated expressions - innecesarias sentencias if's, ciclos forque podría ser while<br>&nbsp;&nbsp; * Duplicate code - código copiado y pegado significa errores copiados y pegados <br> 

El plugin marca como error,warning e info en la vista de Tasks del Eclipse cualquier violacion al estilo definido. 

Para instalarlo hay que agregar la siguiente URL al update manager: 

http://pmd.sourceforge.net/eclipse 

Luego es necesario cargar el profile HEXACTA. Para esto, ir a Window | Preferences | PMD | Rules Configuration, seleccionar "clear all" y posteriormente importar el siguiente XML. 

'''eclipse_formatter_profile_PMD.xml '''(puede obtener una copia en el [http://hxtfs02/sites/HAT/CI/Forms/AllItems.aspx?RootFolder=%2fsites%2fHAT%2fCI%2fConfig%20Eclipse%20Files&FolderCTID=&View={FC4FEAC9-8938-4EEF-8B43-6D74BF5E71B4} sharepoint]) 

El plugin se puede activar para uno o varios proyectos desde el menu contextual, teniendo un proyecto Java seleccionado. 

Ver configuración de PMD con Maven2 y ANR .... [[HAT:PDM|PMD]] 

<br> 

== FindBugs Eclipse Plugin  ==

FindBugs es una herramienta de análisis estático de código. Se integra fácilmente con maven o ANT, y también existe un plugin para correrlo desde el Eclipse. Marca los posibles bugs con un ''marker'' (similar a un bichito) al lado de las líneas de código fuente. Además ofrece una vista de ''Bug Explorer'' donde los lista. 

Para instalarlo, agregar el update site: 

[http://findbugs.cs.umd.edu/eclipse http://findbugs.cs.umd.edu/eclipse] 

'''Tip''': por default FindBugs no corre con la compilación incremental. Para habilitar esto, ir a las propiedades de cada proyecto y tildar la opción "Run FindBugs automatically". 

Por el momento no hay una forma de establecer una configuración "estándar" para Hexacta. Las reglas de FindBugs se configuran en las propiedades de cada proyecto. En principio, recomendamos dejar las ''default''. 

Para filtrar bugs de código "legacy", es posible guardar una corrida inicial de FindBugs como un XML (menú contextual, Save XML). Después en las propiedades del proyecto se puede setear este XML como "baseline bugs" en la solapa de filtros. Como consecuencia los bugs presentes en el ''baseline'' no volverán a ser reportados. 

<br> 

== Runner Jetty  ==

Seleccionar Help --&gt; Software Updates... Ir a la solapa Available Software y seleccionar el boton Add Site... En el campo Location escribir 

http://run-jetty-run.googlecode.com/svn/trunk/updatesite/ y presionar Ok Luego, seleccionar el nuevo site creado y presionar Install... y seguir las instrucciones de pantalla Configuración del launcher 

<br> 

Seleccionar Run --&gt; Run configurations. 

Crear una Jetty Webapp con las siguientes configuraciones: 

*Name: &lt;Nombre del proyecto donde está la webapp&gt; 
*En la solapa Jetty, Project: &lt;nombredelproyecto&gt; 
*En la solapa Jetty, Context: /&lt;nombredecontexto&gt; 
*En la solapa Jetty, Port: 8080 
*En la solapa Jetty, HTTPS Port: dejarlo en blanco 
*En la solapa Jetty, WebApp dir: src/main/webapp

<br> 

== M2 Eclipse  ==

M2 Eclipse permite integrar Maven2 con eclipse. 

El update site es[Http://m2eclipse.sonatype.org/sites/m2e http://m2eclipse.sonatype.org/sites/m2e] 

Configurar&nbsp;: 

*Deshabilitar "Download repository index updates on startup" 
*Agregar en installations el path de maven en "installations" 
*Configurar el settings.xml correcto en "user settings"

Hay dos funcionalidades de este plugin muy útiles&nbsp;: 

*Agregar dependencias a un proyecto (click derecho sobre el pom.xml --&gt; Maven --t; Add dependency) 
*Crear nuevos proyectos con la estructura de maven (File --&gt; New --&gt; Project .. --&gt; Maven)

<br> 

= Extras  =

== Eclipse Themes (Momento Rexona)  ==

Eclipse permite cambiar el look de los editores, en este [http://hxtfs02/sites/HAT/CI/Forms/AllItems.aspx?RootFolder=/sites/HAT/CI/Config%20Eclipse%20Files&FolderCTID=&View={FC4FEAC9-8938-4EEF-8B43-6D74BF5E71B4} link]&nbsp;hay varios pre-configurados ('''eclipse-themes.zip''') 

<br> Para instalarlo, copiar el que mas guste (los dos archivos que están en la carpeta de theme) en&nbsp;'''workspace\.metadata\.plugins\org.eclipse.core.runtime\.settings''' y reiniciar eclipse. 

<br> 

[[Image:Eclipse-theme.PNG|center]] 

<br> 

<br> 

== Quickrex eclipse plugin<br>  ==

Este plugin permite escribir expresiones regulares a través de una interfaz de manera cómoda, testearlas y luego trasladarla a código java. 

Para instalarlo hay que agregar la siguiente URL al update manager: 

[http://www.bastian-bergerhoff.com/eclipse/features. www.bastian-bergerhoff.com/eclipse/features.] 

Luego para escribir una expresión regular debemos ir a '''‘window-&gt;show view-&gt;quickRex’.''' Presionando en ‘'''edit'''’ sobre dicha ventana podemos generar una regexp utilizando los constructores, operadores, caracteres especiales y otras cosas que vienen predefinidas por el plugin.<br> 

<br>